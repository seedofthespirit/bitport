#!/bin/bash
# -*- mode: sh; coding: utf-8; -*-

# Script
#   luks-add-passphrase
#
# Assumption
# - The script luks-setup-wallet-dir was already run to set up the LUKS encrypted volume for wallet on the USB flash drive.
# - The wallet data filesystem (with the label ${WALLET_STORAGE_VOLUME_LABEL}) on the USB flash drive is already mounted.
#
# Function
# - Make sure another instance of our scripts are not currently running.
# - Check if the wallet data filesystem of the USB drive is mounted at the prescribed location.
# - Add a new passphrase for the LUKS volume within the container file ${WALLET_CONTAINER_FILE}.
#
# Restriction
# - The following characters are not allowed within the passphrase dialog:
#     Null, Control-J (LF) and Control-K (VT).
#   Control-K is used as the custom field separator for yad.
#   Control-J is interpreted as the input record separator by sed and cut.
# - Other control characters are allowed as well as normal printable characters including ASCII and Unicode.
#   However cryptsetup document recommends 7-bit ASCII characters for passphrases,
#   so the use of control characters within passphrases should be for advanced users only.
#
# Logging
# - Logging information will be displayed in one of the yad window for inspection purpose,
#   but will not be saved in any files.
#

script_path=$(/usr/bin/realpath "$0")
script_dir=$(/usr/bin/dirname "${script_path}")
source "${script_dir}/common-utils"

main() {

    check_electrum
    check_script_instance "${SCRIPT_LUKS_SETUP_WALLET}"
    check_script_instance "${SCRIPT_SAVE_WALLET_METADATA}"
    check_script_instance "${SCRIPT_ELECTRUM_WRAPPER}"
    check_script_instance "${SCRIPT_DISPLAY_WALLET_METADATA}"
    check_script_instance "${SCRIPT_LUKS_CHANGE_PASSPHRASE}"
    check_script_instance "${SCRIPT_LUKS_ADD_PASSPHRASE}"

    local logging_window="Add passphrase for LUKS encrypted volume logging"
    local container_file_path="${WALLET_STORAGE_MOUNT_POINT}/${WALLET_CONTAINER_FILE}"

    setup_logging_coproc "${logging_window}"

    check_storage_mount "${WALLET_STORAGE_MOUNT_POINT}"

    load_dm_crypt

    make_mount_point "${LUKS_WALLET_MOUNT_POINT}"

    luks_add_passphrase "${container_file_path}"

    allsteps_done "${logging_window}"

    wait_coproc
}

luks_add_passphrase() {
    local container_file="$1"

    local text1 text2 text3 text4 text5 text6 text7 text8 text9
    text1="<b>We are going to add a new passphrase for the LUKS volume on\n${container_file}.</b>\n\n"
    text2='<b>The next dialog will ask for one of the current passphrases for permission.</b>\n'
    text3='<b>You can switch between show/hide passphrase in the Pinentry dialog by\n'
    text4='pressing the button next to the passphrase box.</b>'
    local existing_passphrase

    luks_passphrase "${text1}${text2}${text3}${text4}" existing_passphrase

    echo "${existing_passphrase}"
    if [ -z "${existing_passphrase}" ]; then
        fatal "Old passphrase was not given. Exiting."
    fi

    text1='<b>The next dialog will ask for the new LUKS passphrase.</b>\n\n'
    text2='<b>You can switch between show/hide passphrase in the Pinentry dialog by\n'
    text3='pressing the button next to the passphrase box.</b>\n\n'
    text4='<b><span foreground="blue">Remember to keep your passphrase in multiple safe locations!</span></b>\n\n'
    text5='<b>Passphrase suggestion</b>:\n'
    text6='One of the ways to generate strong passphrases is to use /usr/bin/diceware\n'
    text7='See\n'
    text8='http://world.std.com/~reinhold/diceware.html\n'
    text9='https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/'
    local new_passphrase

    luks_passphrase_with_confirm "${text1}${text2}${text3}${text4}${text5}${text6}${text7}${text8}${text9}" new_passphrase

    if [ -z "${new_passphrase}" ]; then
        fatal "New passphrase was not given. Exiting."
    fi

    # cryptsetup luksAddKey restriction:
    # We need to supply cryptsetup luksAddKey with both the existing passphrase and the new passphrase,
    # but only one of them can be given via stdin and the other has to be given via a file.
    # Writing the passphrase to a file is less secure in general but in our case it should be good
    # becaseu we are using a live linux system.
    local status
    local existing_passphrase_file
    existing_passphrase_file=$(${MKTEMP_CMD})
    status="$?"
    if [ "${status}" != '0' ]; then
        exit 1
    fi
    ${ECHO_CMD} -En "${existing_passphrase}" > "${existing_passphrase_file}"

    log_info "Adding a new passphrase for the LUKS volume."
    local output
    output=$( ${ECHO_CMD} -En "${new_passphrase}" | ${SUDO_CMD} ${CRYPTSETUP_CMD} luksAddKey "${container_file}" --key-file="${existing_passphrase_file}" --new-keyfile=- 2>&1 )
    status="$?"

    ${RM_CMD} "${existing_passphrase_file}"

    if [ "${status}" = '0' ]; then
        log_info "Successfully added the new passphrase for the LUKS volume."
    elif [ "${status}" = '1' ]; then
        fatal "sudo failed running cryptsetup luksAddKey ${container_file}."
    else
        text1="cryptsetup luksAddKey failed in adding a new passphrase; ${output}\n"
        local pass_error='No key available with this passphrase.'
        if [ "${output}" = "${pass_error}" ]; then
            text2="This error message means the existing passphrase was wrong.\n"
            fatal "${text1}${text2}"
        else
            fatal "${text1}"
        fi
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi
