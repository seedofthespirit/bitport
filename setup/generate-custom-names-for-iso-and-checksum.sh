#!/bin/bash

main() {

    if [ $# != 1 ]; then
        /bin/echo "Usage: $0 live-build-base-directory"
        /bin/echo "live-build-base-directory is the directory where \"lb build\" was run."
        return
    fi

    # the directory where Debian Live Build lb command is run
    local lb_base_dir="$1"

    if [ ! -d "${lb_base_dir}" ]; then
        /bin/echo "error: directory ${lb_base_dir} doesn't exist!"
        exit 1
    fi

    # default names
    # ISO file:                 live-image-amd64.hybrid.iso
    # ISO files file:           live-image-amd64.files
    # ISO packages file:        live-image-amd64.packages
    # checksum file:            binary/sha256sum.txt
    # these are generated by the command lb build:
    local DEFAULT_ISO_IMAGE='live-image-amd64.hybrid.iso'
    local DEFAULT_ISO_FILES='live-image-amd64.files'
    local DEFAULT_ISO_PACKAGES='live-image-amd64.packages'
    local LIVE_CHECKSUM='binary/sha256sum.txt'

    # dialog for the custom name
    local custom_iso_image
    dialog_iso_name ${DEFAULT_ISO_IMAGE} custom_iso_image
    if [ -z "${custom_iso_image}" ]; then
        exit 1
    fi

    # custom names
    # ISO file:                 ${custom_iso_image}
    # ISO files file:           ${custom_iso_image}.files
    # ISO packages file:        ${custom_iso_image}.packages
    # encrypted checksum file:  ${custom_iso_image}_sha256sum.gpg
    local custom_iso_image_path="${custom_iso_image}"
    local custom_iso_files_path="${custom_iso_image}.files"
    local custom_iso_packages_path="${custom_iso_image}.packages"
    # the custom file name for the encrypted ${LIVE_CHECKSUM}
    # This convention makes it possible for the script verify-checksum to detect the correct checksum file accompanying the live iso file.
    local custom_encrypted_checksum="${custom_iso_image}_sha256sum.gpg"

    /bin/echo "changing the directory to ${lb_base_dir}"
    cd "${lb_base_dir}"

    if [ ! -f "${DEFAULT_ISO_IMAGE}" ]; then
        /bin/echo "error: can't find ${DEFAULT_ISO_IMAGE} in the current directory!"
        exit 1
    fi
    if [ ! -f "${DEFAULT_ISO_FILES}" ]; then
        /bin/echo "error: ${DEFAULT_ISO_FILES} doesn't exist in the current directory"
        exit 1
    fi
    if [ ! -f "${DEFAULT_ISO_PACKAGES}" ]; then
        /bin/echo "error: ${DEFAULT_ISO_PACKAGES} doesn't exist in the current directory"
        exit 1
    fi
    if [ ! -f "${LIVE_CHECKSUM}" ]; then
        /bin/echo "error: can't find ${LIVE_CHECKSUM} in the current directory!"
        exit 1
    fi

    /bin/cat << END_OF_TEXT

These are the commands to copy ISO and associated files to the custom names:
    cd "${lb_base_dir}"
    /bin/cp --preserve=mode,timestamps "${DEFAULT_ISO_IMAGE}" "${custom_iso_image_path}"
    /bin/cp --preserve=mode,timestamps "${DEFAULT_ISO_FILES}" "${custom_iso_files_path}"
    /bin/cp --preserve=mode,timestamps "${DEFAULT_ISO_PACKAGES}" "${custom_iso_packages_path}"
    /usr/bin/gpg --symmetric --output "${custom_encrypted_checksum}" "${LIVE_CHECKSUM}"

Note:
If you want to change the ISO file name then you need to update the sha256 checksum file name
at the same time so that the checksum file name = the ISO file name + _sha256sum.gpg
Otherwise the script verify-checksum will not work as intended.

END_OF_TEXT

    return
}

test_dialog_iso_name() {
    local DEFAULT_ISO_IMAGE='live-image-amd64.hybrid.iso'
    local custom_iso_image
    dialog_iso_name ${DEFAULT_ISO_IMAGE} custom_iso_image
    /bin/echo "custom_iso_image ${custom_iso_image}"
}

dialog_iso_name() {
    local default_iso_image="$1"
    declare -n custom_iso_image_ref="$2"

    local today=`/bin/date '+%Y%m%d'`
    local suggested_name="bitport-debian-live-${today}.iso"

    local text1 text2 text3 text4 text5 text6 text7 text8 text9 text10
    text1="<b>The current script will print out the commands you can run to copy the ISO-9660 file\n"
    text2="<span foreground='mediumblue'>${default_iso_image}</span> generated by 'lb build' to a more recognizable custom file name,\n"
    text3="and to copy the associated checksum file and the ISO contents files with your custom prefix.</b>\n"
    text4="\n<b>Name suggestion:</b>\n"
    text5=" - Including the date will make it easy to identify.\n"
    text6=" - It is hard to describe the exact ISO contents just by the file name,\n"
    text7=" - so you can let the ISO contents file (which is also generated by lb build) do it.\n"

    local dialog_output=$(/usr/bin/yad \
                              --form \
                              --title 'Set custom name for the ISO file' \
                              --field='Custom ISO file name:STR' "${suggested_name}" \
                              --text "${text1}${text2}${text3}${text4}${text5}${text6}${text7}${text8}${text9}${text10}" \
                              --image 'dialog-question' --window-icon='dialog-question' \
                              --center --fixed --borders=12 --no-escape)
    if [ -z "${dialog_output}" ]; then
        /bin/echo "error: no custom name was entered"
    fi
    custom_iso_image_ref=$(/bin/echo "${dialog_output}" | /bin/sed -e 's/|$//')
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    #test_dialog_iso_name
    main "$@"
fi
